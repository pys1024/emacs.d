#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (kill-buffer (("init-local.el" "init-local.el" "main.c • STC11FXX源代码" "v17b.c" "main.c • code" "LDChip.c" "main.c • Aliu_home-语音" "*Warnings*" "data.h" "test.c") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("init-local.el" 3 "main.c • STC11FXX源代码" 1 "v17b.c" 1 "main.c • code" 1 "LDChip.c" 1 "main.c • Aliu_home-语音" 1 "*Warnings*" 1 "data.h" 1 "output" 2 "test.c" 1))) (closure ((split-function . split-window-vertically) t) (&optional arg) "Split this window and switch to the new window unless ARG is provided." (interactive "P") (funcall split-function) (let ((target-window (next-window))) (set-window-buffer target-window (other-buffer)) (if arg nil (select-window target-window)))) (("shell") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("shell" 1))) counsel-find-file (("/home/pengyongsheng/share/Aliu_home/V0.7 08XE基本识别程序(口令模式)/code/main.c" "/home/pengyongsheng/share/Aliu_home/V0.7 08XE基本识别程序(口令模式)/code/LDChip.c" "/media/pengyongsheng/SoftwareFile/Project Data/20171113项目/STC11FXX源代码/main.c" "/home/pengyongsheng/.emacs.d/lisp/init-local.el" "/home/pengyongsheng/share/Aliu_home/nrf24l01.c" "/home/pengyongsheng/share/Aliu_home/bluetooth_protocol.c" "/home/pengyongsheng/share/Aliu_home/nrf24l01_protocol.c" "/home/pengyongsheng/share/Aliu_home/nrf24l01.c" "/home/pengyongsheng/share/Aliu_home/main.c" "/home/pengyongsheng/tmp/test.c") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/home/pengyongsheng/share/Aliu_home/task.c" 2 "/home/pengyongsheng/share/Aliu_home/main.c" 1 "/home/pengyongsheng/share/Aliu_home/nrf24l01.c" 2 "/home/pengyongsheng/share/Aliu_home/nrf24l01_protocol.c" 1 "/home/pengyongsheng/share/Aliu_home/bluetooth_protocol.c" 1 "/home/pengyongsheng/.emacs.d/lisp/init-local.el" 2 "/media/pengyongsheng/SoftwareFile/Project Data/20171113项目/STC11FXX源代码/main.c" 1 "/home/pengyongsheng/share/Aliu_home/V0.7 08XE基本识别程序(口令模式)/code/LDChip.c" 1 "/home/pengyongsheng/share/Aliu_home/V0.7 08XE基本识别程序(口令模式)/code/main.c" 1 "/home/pengyongsheng/share/Aliu_home/v17b.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/main.c" 2 "/home/pengyongsheng/share/Aliu_home-语音/v17b.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/uart.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/nrf24l01.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/nrf24l01_protocol.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/nrf24l01_protocol.h" 1 "/home/pengyongsheng/share/Aliu_home-语音/task.c" 1 "/home/pengyongsheng/share/Aliu_home/bluetooth_protocol.h" 1 "/home/pengyongsheng/share/Aliu_home-语音/conversation.h" 1 "/home/pengyongsheng/share/Aliu_home-语音/V0.7 08XE基本识别程序(口令模式)/code/LDChip.c" 1 "/home/pengyongsheng/share/Aliu_home-语音/V0.7 08XE基本识别程序(口令模式)/code/main.c" 1 "/home/pengyongsheng/share/Aliu_home/data.h" 1 "/home/pengyongsheng/share/Aliu_home/dh11.h" 1 "/home/pengyongsheng/tmp/test.c" 1))) ivy-switch-buffer (("main.c" "main.c" "bluetooth_protocol.c" "nrf24l01_protocol.c" "bluetooth_protocol.c" "main.c" "nrf24l01_protocol.c" "main.c" "main.c" "bluetooth_protocol.c") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("task.c" 4 "main.c" 12 "nrf24l01_protocol.c" 6 "bluetooth_protocol.c" 29 "*Messages*" 1 "uart.c" 4 "main.c • Aliu_home-语音" 6 "conversation.c" 10 "v17b.c" 1 "nrf24l01_protocol.h" 6 "conversation.h" 2 "main.c • code" 1 "LDChip.c" 2 "task.c • Aliu_home-语音" 1 "nrf24l01_protocol.c • Aliu_home-语音" 1 "nrf24l01.c • Aliu_home" 1 "main.c • Aliu_home" 21 "task.c • Aliu_home" 6 "nrf24l01_protocol.c • Aliu_home" 6 "bluetooth_protocol.h" 4 "/home/pengyongsheng/share/Aliu_home/data.h" 1 "data.h" 5))) revert-buffer-with-coding-system (("chinese-gbk-dos" "chinese-gbk-dos" "chinese-gbk-dos" "unix" "dos" "unix" "chinese-gbk-dos" "chinese-gbk-dos" "chinese-gbk-dos" "chinese-gbk-dos") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("chinese-gbk-unix" 1 "chinese-gbk-dos" 13 "unix" 2 "dos" 1 "whitespace-cleanup" 1))) set-buffer-file-coding-system (("unix" "dos" "unix") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("unix" 2 "dos" 1))) self-insert-command (("company-tabnine" "company-tabnine" "hi-red-b" "hi-red-b" "hi-blue" "hi-blue" "unix" "dos" "unix") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("unix" 2 "dos" 1 "hi-blue" 2 "hi-red-b" 2 "company-tabnine" 2))) set-buffer-process-coding-system (("unix") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("unix" 1))) mouse-set-point (("package-install" "package-install" "calc" "shell" "shell") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("shell" 2 "calc" 1 "package-install" 2))) kill-region (("whitespace-cleanup") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("whitespace-cleanup" 1))) next-line (("whitespace-cleanup" "whitespace-cleanup") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("whitespace-cleanup" 2))) previous-line (("whitespace-cleanup") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("whitespace-cleanup" 1))) er/expand-region (("helm-do-ag") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("helm-do-ag" 1))) helm-do-ag (("/home/pengyongsheng/share/Aliu_home-语音/") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/home/pengyongsheng/share/Aliu_home-语音/" 1))) helm-confirm-and-exit-minibuffer (("conversation") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("conversation" 1))) calc-quit (("calculator") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("calculator" 1))) calculator-quit (("calculator") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("calculator" 1))) undo (("calculator") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("calculator" 1))) exit-minibuffer (("hi-red-b" "hi-red-b" "hi-blue" "hi-blue" "hi-blue-b") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("hi-blue-b" 1 "hi-blue" 2 "hi-red-b" 2))) ivy-next-line (("hi-blue-b") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("hi-blue-b" 1))) unhighlight-regexp (("[BB]T_BUF" "[BB]T_BUF" "[BB]T_BUF" "[BB]T_BUF") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("[BB]T_BUF" 4))) select-window-2 (("company-tabnine-install-binary" "shell") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("shell" 1 "company-tabnine-install-binary" 1))) package-install (("company-tabnine" "company-tabnine" "package-refresh-contents" "company-tabnine" "company-tabnine") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("company-tabnine" 4 "package-refresh-contents" 1))) save-buffer (("compile") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("compile" 1))) compile (("gcc ./test.c -o test" "gcc ./test.c -o test" "gcc ./test.c -o test") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("gcc ./test.c -o test" 3))) select-window-1 (("compile" "compile") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("compile" 2))) (closure ((split-function . split-window-vertically) t) (&optional arg) "Split this window and switch to the new window unless ARG is provided." (interactive "P") (funcall split-function) (let ((target-window (next-window))) (set-window-buffer target-window (other-buffer)) (if arg nil (select-window target-window)))) (("shell") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("shell" 1)))))